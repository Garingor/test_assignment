import _extends from '@babel/runtime/helpers/esm/extends';
import '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import 'rocketjump-core';
import { r as rj, S as SUCCESS } from '../../rj-8a6e6805.js';
import 'rxjs';
import 'rxjs/operators';
import 'rocketjump-core/utils';
import '@babel/runtime/helpers/esm/inheritsLoose';
import 'object-path-immutable';
import '../../index.es.js';
import 'react';
import '../../debugger-ad70456b.js';
import 'hoist-non-react-statics';
import rjListInsert from '../listInsert/index.es.js';
import rjListUpdate from '../listUpdate/index.es.js';
import rjListDelete from '../listDelete/index.es.js';

var makeListDataReducer = function makeListDataReducer(customListReducer) {
  var defaultListReducer = function defaultListReducer(prevState, _ref) {
    var data = _ref.payload.data,
        meta = _ref.meta;
    var newList = data;

    if (meta && meta.append) {
      return (prevState || []).concat(newList);
    }

    if (meta && meta.prepend) {
      return newList.concat(prevState || []);
    }

    return newList;
  };

  var listReducer = typeof customListReducer === 'function' ? customListReducer : defaultListReducer;
  return function (prevState, action) {
    return listReducer(prevState, action);
  };
}; // Selectors for a list

var makeListSelectors = function makeListSelectors(getData) {
  var getList = getData;

  var getCount = function getCount(state) {
    var data = getList(state);
    return data === null ? null : data.length;
  };

  return {
    getList: getList,
    getCount: getCount
  };
}; // RJ List

var rjPlainList = function rjPlainList(config) {
  if (config === void 0) {
    config = {};
  }

  var dataReducer = makeListDataReducer(config.customListReducer);
  return rj(rjListInsert(), rjListUpdate(), rjListDelete(), {
    selectors: function selectors(_ref2) {
      var getData = _ref2.getData;
      return makeListSelectors(getData);
    },
    reducer: function reducer(oldReducer) {
      return function (state, action) {
        if (action.type === SUCCESS) {
          return _extends({}, state, {
            pending: false,
            data: dataReducer(state.data, action)
          });
        } else {
          return oldReducer(state, action);
        }
      };
    },
    computed: {
      error: 'getError',
      loading: 'isLoading',
      list: 'getList'
    }
  });
};

export default rjPlainList;
export { makeListDataReducer, makeListSelectors };
