import _extends from '@babel/runtime/helpers/esm/extends';
import '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import 'rocketjump-core';
import { r as rj, C as CLEAN, o as omit, S as SUCCESS, F as FAILURE, P as PENDING } from '../../rj-8a6e6805.js';
import 'rxjs';
import 'rxjs/operators';
import 'rocketjump-core/utils';
import '@babel/runtime/helpers/esm/inheritsLoose';
import 'object-path-immutable';
import '../../index.es.js';
import 'react';
import '../../debugger-ad70456b.js';
import 'hoist-non-react-statics';

var defaultKeyMaker = function defaultKeyMaker(action) {
  return action.meta ? action.meta.id : null;
};

var defaultDataTransform = function defaultDataTransform(arg) {
  return arg;
};

var handlePendingItem = function handlePendingItem(prevState, action) {
  return _extends({}, prevState, {
    error: null,
    pending: true,
    data: prevState && prevState.data || null
  });
};

var handleSuccessItem = function handleSuccessItem(prevState, action, dataTransform) {
  return _extends({}, prevState, {
    pending: false,
    data: dataTransform(action.payload.data)
  });
};

var handleFailureItem = function handleFailureItem(prevState, action) {
  return _extends({}, prevState, {
    pending: false,
    error: action.payload
  });
};

var makeMapReducer = function makeMapReducer(keyMaker, dataTransform, keepCompleted, fallbackReducer) {
  if (keyMaker === void 0) {
    keyMaker = defaultKeyMaker;
  }

  if (keepCompleted === void 0) {
    keepCompleted = true;
  }

  return function (prevState, action) {
    var key = keyMaker(action);
    prevState = prevState || {};

    switch (action.type) {
      case PENDING:
        {
          var _extends2;

          return _extends({}, prevState, (_extends2 = {}, _extends2[key] = handlePendingItem(prevState[key]), _extends2));
        }

      case FAILURE:
        {
          var _extends3;

          return _extends({}, prevState, (_extends3 = {}, _extends3[key] = handleFailureItem(prevState[key], action), _extends3));
        }

      case SUCCESS:
        {
          if (keepCompleted) {
            var _extends4;

            return _extends({}, prevState, (_extends4 = {}, _extends4[key] = handleSuccessItem(prevState[key], action, dataTransform || defaultDataTransform), _extends4));
          } else {
            return omit(prevState, [key]);
          }
        }

      case CLEAN:
        {
          // Clear key state
          if (key) {
            return omit(prevState, [key]);
          } // Clear all the state


          return {};
        }

      default:
        return fallbackReducer(prevState, action);
    }
  };
};

var makeMapSelectors = function makeMapSelectors() {
  var getMapPendings = function getMapPendings(state) {
    return Object.keys(state).reduce(function (r, key) {
      var _extends5;

      return state[key].pending ? _extends({}, r, (_extends5 = {}, _extends5[key] = true, _extends5)) : r;
    }, {});
  };

  var getMapLoadings = getMapPendings;

  var getMapFailures = function getMapFailures(state) {
    return Object.keys(state).reduce(function (r, key) {
      var _extends6;

      var error = state[key].error;
      return error !== null ? _extends({}, r, (_extends6 = {}, _extends6[key] = error, _extends6)) : r;
    }, {});
  };

  var getMapData = function getMapData(state) {
    return Object.keys(state).reduce(function (r, key) {
      var _extends7;

      var data = state[key].data;
      return data !== null ? _extends({}, r, (_extends7 = {}, _extends7[key] = data, _extends7)) : r;
    }, {});
  };

  return {
    getMapLoadings: getMapLoadings,
    getMapPendings: getMapPendings,
    getMapFailures: getMapFailures,
    getMapData: getMapData
  };
};

var rjMap = function rjMap(mapConfig) {
  if (mapConfig === void 0) {
    mapConfig = {};
  }

  return rj({
    actions: function actions(_ref) {
      var run = _ref.run,
          clean = _ref.clean;
      return {
        runKey: function runKey(id) {
          for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
            params[_key - 1] = arguments[_key];
          }

          return run.apply(void 0, [id].concat(params)).withMeta({
            id: id
          });
        },
        cleanKey: function cleanKey(id) {
          return clean(id).withMeta({
            id: id
          });
        }
      };
    },
    reducer: function reducer(oldReducer) {
      return makeMapReducer(mapConfig.key, mapConfig.dataTransform, mapConfig.keepCompleted, oldReducer);
    },
    selectors: function selectors() {
      return makeMapSelectors();
    },
    takeEffect: ['groupBy', typeof mapConfig.key === 'function' ? mapConfig.key : defaultKeyMaker]
  });
};

export default rjMap;
