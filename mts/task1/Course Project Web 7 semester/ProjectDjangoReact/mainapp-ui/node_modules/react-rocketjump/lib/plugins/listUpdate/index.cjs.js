'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('@babel/runtime/helpers/extends');
require('@babel/runtime/helpers/objectWithoutPropertiesLoose');
require('rocketjump-core');
var rj = require('../../rj-5794e05d.js');
require('rxjs');
require('rxjs/operators');
var utils = require('rocketjump-core/utils');
require('@babel/runtime/helpers/inheritsLoose');
var objectPathImmutable = require('object-path-immutable');
require('../../index.cjs.js');
require('react');
require('../../debugger-1b0f24ff.js');
require('hoist-non-react-statics');

var TYPE = 'RJ_LIST_UPDATE';

var defaultIdentity = function defaultIdentity(action, listItem) {
  return action.item.id === listItem.id;
};

var defaultUpdater = function defaultUpdater(action) {
  return action.item;
};

var rjListUpdate = function rjListUpdate(config) {
  if (config === void 0) {
    config = {};
  }

  var identity = config.identity || defaultIdentity;
  var updater = config.updater || defaultUpdater;
  var path = config.path || 'data';
  return rj.rj({
    actions: function actions() {
      return {
        updateItem: function updateItem(item) {
          return {
            type: TYPE,
            item: item
          };
        }
      };
    },
    reducer: function reducer(oldReducer) {
      return function (state, action) {
        if (action.type === TYPE) {
          var list = utils.get(state, path);
          if (list) list = list.map(function (listItem) {
            return identity(action, listItem) ? updater(action, listItem) : listItem;
          });
          return objectPathImmutable.set(state, path, list);
        }

        return oldReducer(state, action);
      };
    }
  });
};

exports.default = rjListUpdate;
