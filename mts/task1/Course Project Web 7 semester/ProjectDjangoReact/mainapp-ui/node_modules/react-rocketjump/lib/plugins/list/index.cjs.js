'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
require('@babel/runtime/helpers/objectWithoutPropertiesLoose');
require('rocketjump-core');
var rj = require('../../rj-5794e05d.js');
require('rxjs');
require('rxjs/operators');
var utils = require('rocketjump-core/utils');
require('@babel/runtime/helpers/inheritsLoose');
require('object-path-immutable');
require('../../index.cjs.js');
require('react');
require('../../debugger-1b0f24ff.js');
require('hoist-non-react-statics');
var plugins_listInsert_index = require('../listInsert/index.cjs.js');
var plugins_listUpdate_index = require('../listUpdate/index.cjs.js');
var plugins_listDelete_index = require('../listDelete/index.cjs.js');
var qs = require('query-string');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);
var qs__default = /*#__PURE__*/_interopDefaultLegacy(qs);

var pickParamsFromUrl = function pickParamsFromUrl(url, pick) {
  if (url) {
    var params = qs__default['default'].parse(qs__default['default'].extract(url));
    return pick(params);
  }

  return null;
};

var pickPage = function pickPage(_ref) {
  var page = _ref.page;
  return {
    page: +(page || 1)
  };
};

var nextPreviousPaginationAdapter = {
  // Getter for list of stuff string or fn selector from the response
  list: 'results',
  // Count of total stuff
  count: 'count',
  current: function current(_ref2) {
    var next = _ref2.next,
        previous = _ref2.previous,
        count = _ref2.count;

    var _ref3 = pickParamsFromUrl(next, pickPage) || {
      page: null
    },
        nextPage = _ref3.page;

    var _ref4 = pickParamsFromUrl(previous, pickPage) || {
      page: null
    },
        prevPage = _ref4.page;

    if (nextPage !== null) {
      return {
        page: nextPage - 1
      };
    } else if (prevPage !== null) {
      return {
        page: prevPage + 1
      };
    } else if (count > 0) {
      return {
        page: 1
      };
    } else {
      return null;
    }
  },
  // Next params
  next: function next(_ref5) {
    var _next = _ref5.next;
    return pickParamsFromUrl(_next, pickPage);
  },
  // Prev params
  previous: function previous(_ref6) {
    var _previous = _ref6.previous;
    return pickParamsFromUrl(_previous, pickPage);
  }
};

var pickLimitOffset = function pickLimitOffset(_ref7) {
  var limit = _ref7.limit,
      offset = _ref7.offset;
  return {
    offset: +(offset || 0),
    limit: +limit
  };
};

var limitOffsetPaginationAdapter = {
  // Getter for list of stuff string or fn selector from the response
  list: 'results',
  // Count of total stuff
  count: 'count',
  current: function current(_ref8) {
    var next = _ref8.next,
        previous = _ref8.previous,
        count = _ref8.count;

    var _ref9 = pickParamsFromUrl(previous, pickLimitOffset) || {
      limit: null,
      offset: null
    },
        prevLimit = _ref9.limit,
        prevOffset = _ref9.offset;

    var _ref10 = pickParamsFromUrl(next, pickLimitOffset) || {
      limit: null,
      offset: null
    },
        nextLimit = _ref10.limit,
        nextOffset = _ref10.offset;

    if (prevLimit !== null) {
      return {
        limit: prevLimit,
        offset: prevLimit + prevOffset
      };
    } else if (nextLimit !== null) {
      return {
        limit: nextLimit,
        offset: nextLimit - nextOffset
      };
    } else if (count > 0) {
      return {
        page: 1
      };
    } else {
      return null;
    }
  },
  // Next params
  next: function next(_ref11) {
    var _next2 = _ref11.next;
    return pickParamsFromUrl(_next2, pickLimitOffset);
  },
  // Prev params
  previous: function previous(_ref12) {
    var _previous2 = _ref12.previous;
    return pickParamsFromUrl(_previous2, pickLimitOffset);
  }
};

var makeListDataReducer = function makeListDataReducer(paginationAdapter, customListReducer, customPaginationReducer) {
  var defaultListReducer = function defaultListReducer(prevState, _ref) {
    var data = _ref.payload.data,
        meta = _ref.meta;
    var newList = rj.getOrSelect(data, paginationAdapter.list);

    if (meta && meta.append && Array.isArray(prevState)) {
      return prevState.concat(newList);
    }

    if (meta && meta.prepend && Array.isArray(prevState)) {
      return newList.concat(prevState);
    }

    return newList;
  };

  var defaultPaginationReducer = function defaultPaginationReducer(prevState, _ref2) {
    var _ref2$payload = _ref2.payload,
        data = _ref2$payload.data,
        params = _ref2$payload.params;
    return {
      count: rj.getOrSelect(data, paginationAdapter.count),
      current: rj.getOrSelect(data, paginationAdapter.current),
      next: rj.getOrSelect(data, paginationAdapter.next),
      previous: rj.getOrSelect(data, paginationAdapter.previous)
    };
  };

  var listReducer = typeof customListReducer === 'function' ? customListReducer : defaultListReducer;
  var paginationReducer = typeof customPaginationReducer === 'function' ? customPaginationReducer : defaultPaginationReducer;
  return function (prevState, action) {
    return {
      list: listReducer(utils.get(prevState, 'list'), action),
      pagination: paginationReducer(utils.get(prevState, 'pagination'), action)
    };
  };
}; // Selectors for a list


var makeListSelectors = function makeListSelectors(getData, pageSize) {
  var getList = function getList(state) {
    var data = getData(state);
    return data === null ? null : data.list;
  };

  var getCount = function getCount(state) {
    var data = getData(state);
    return data === null ? null : data.pagination.count;
  };

  var getNumPages = function getNumPages(state, overridePageSize) {
    if (overridePageSize === void 0) {
      overridePageSize = pageSize;
    }

    if (overridePageSize === undefined) {
      throw new Error('[reactRj - rjList] Please pass a pageSize argument to getNumPages' + 'selector or define a default page size (config.pageSize)');
    }

    var count = getCount(state);
    return count === null ? null : Math.ceil(count / overridePageSize);
  };

  var hasNext = function hasNext(state) {
    var data = getData(state);
    return data === null ? false : data.pagination.next !== null;
  };

  var hasPrev = function hasPrev(state) {
    var data = getData(state);
    return data === null ? false : data.pagination.previous !== null;
  };

  var getNext = function getNext(state) {
    var data = getData(state);
    return data === null ? null : data.pagination.next;
  };

  var getPrev = function getPrev(state) {
    var data = getData(state);
    return data === null ? null : data.pagination.previous;
  };

  var getCurrent = function getCurrent(state) {
    var data = getData(state);
    return data === null ? null : data.pagination.current;
  };

  var getPagination = function getPagination(state) {
    return {
      count: getCount(state),
      numPages: getNumPages(state),
      hasNext: hasNext(state),
      hasPrev: hasPrev(state),
      current: getCurrent(state),
      next: getNext(state),
      prev: getPrev(state)
    };
  };

  return {
    getList: getList,
    getCount: getCount,
    getNumPages: getNumPages,
    hasNext: hasNext,
    hasPrev: hasPrev,
    getNext: getNext,
    getPrev: getPrev,
    getCurrent: getCurrent,
    getPagination: getPagination
  };
}; // RJ List


var rjList = function rjList(config) {
  if (config === void 0) {
    config = {};
  }

  if (!config.pagination) throw new Error('[reactRj - rjList] Please define a pagination adapter (config.pagination)');
  var dataReducer = makeListDataReducer(config.pagination, config.customListReducer, config.customPaginationReducer);
  return rj.rj(plugins_listInsert_index['default']({
    path: 'data.list'
  }), plugins_listUpdate_index['default']({
    path: 'data.list'
  }), plugins_listDelete_index['default']({
    path: 'data.list'
  }), {
    selectors: function selectors(_ref3) {
      var getData = _ref3.getData;
      return makeListSelectors(getData, config.pageSize);
    },
    reducer: function reducer(oldReducer) {
      return function (state, action) {
        if (action.type === rj.SUCCESS) {
          return _extends__default['default']({}, state, {
            pending: false,
            data: dataReducer(state.data, action)
          });
        } else {
          return oldReducer(state, action);
        }
      };
    },
    computed: {
      error: 'getError',
      loading: 'isLoading',
      list: 'getList',
      pagination: 'getPagination'
    }
  });
};

exports.default = rjList;
exports.limitOffsetPaginationAdapter = limitOffsetPaginationAdapter;
exports.nextPreviousPaginationAdapter = nextPreviousPaginationAdapter;
exports.pickParamsFromUrl = pickParamsFromUrl;
