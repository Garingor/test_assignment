import _extends from '@babel/runtime/helpers/esm/extends';
import '@babel/runtime/helpers/esm/objectWithoutPropertiesLoose';
import 'rocketjump-core';
import { r as rj, b as RUN } from '../../rj-8a6e6805.js';
import { timer, empty } from 'rxjs';
import { scan, debounce, distinctUntilChanged } from 'rxjs/operators';
import 'rocketjump-core/utils';
import '@babel/runtime/helpers/esm/inheritsLoose';
import 'object-path-immutable';

var defaultOptions = {
  time: 180
};

var rjDebounce = function rjDebounce(optionsOrTime) {
  if (optionsOrTime === void 0) {
    optionsOrTime = defaultOptions;
  }

  var options;

  if (typeof optionsOrTime === 'number' && isFinite(optionsOrTime)) {
    options = {
      time: optionsOrTime
    };
  } else {
    options = _extends({}, defaultOptions, optionsOrTime);
  }

  return rj({
    actions: function actions(_ref) {
      var run = _ref.run;
      return {
        runDebounced: function runDebounced() {
          return run.apply(void 0, arguments).withMeta({
            debounced: true
          });
        }
      };
    },
    effectPipeline: function effectPipeline(action$) {
      return action$.pipe(scan(function (prev, current) {
        // Shoud debounce ma run?
        if (current.type === RUN && current.meta && current.meta.debounced && typeof options.when === 'function') {
          var shouldDebounce = options.when(prev ? prev.payload.params : null, current.payload.params);

          var newMeta = _extends({}, current.meta);

          if (shouldDebounce) {
            newMeta.debounced = true;
          } else {
            newMeta.debounced = false;
          }

          return _extends({}, current, {
            meta: newMeta
          });
        }

        return current;
      }, null), debounce(function (action) {
        if (action.type === RUN && action.meta.debounced) {
          return timer(options.time);
        } else {
          return empty();
        }
      }), distinctUntilChanged(function (prevAction, currAction) {
        // not same stuff
        if (currAction.type !== prevAction.type) {
          return false;
        } // Ignore not debounced actions...


        if (currAction.type !== RUN || !currAction.meta.debounced) {
          return false;
        } // cant be the same


        if (currAction.payload.params.length !== prevAction.payload.params.length) {
          return false;
        } // TODO: Maybe deep compare at 1 level depth of plain objects
        // compare params


        for (var i = 0; i < currAction.payload.params.length; i++) {
          if (currAction.payload.params[i] !== prevAction.payload.params[i]) {
            return false;
          }
        } // the same action =)


        return true;
      }));
    }
  });
};

export default rjDebounce;
