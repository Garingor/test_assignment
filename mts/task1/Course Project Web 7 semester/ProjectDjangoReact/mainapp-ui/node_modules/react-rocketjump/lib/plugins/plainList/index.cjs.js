'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _extends = require('@babel/runtime/helpers/extends');
require('@babel/runtime/helpers/objectWithoutPropertiesLoose');
require('rocketjump-core');
var rj = require('../../rj-5794e05d.js');
require('rxjs');
require('rxjs/operators');
require('rocketjump-core/utils');
require('@babel/runtime/helpers/inheritsLoose');
require('object-path-immutable');
require('../../index.cjs.js');
require('react');
require('../../debugger-1b0f24ff.js');
require('hoist-non-react-statics');
var plugins_listInsert_index = require('../listInsert/index.cjs.js');
var plugins_listUpdate_index = require('../listUpdate/index.cjs.js');
var plugins_listDelete_index = require('../listDelete/index.cjs.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var _extends__default = /*#__PURE__*/_interopDefaultLegacy(_extends);

var makeListDataReducer = function makeListDataReducer(customListReducer) {
  var defaultListReducer = function defaultListReducer(prevState, _ref) {
    var data = _ref.payload.data,
        meta = _ref.meta;
    var newList = data;

    if (meta && meta.append) {
      return (prevState || []).concat(newList);
    }

    if (meta && meta.prepend) {
      return newList.concat(prevState || []);
    }

    return newList;
  };

  var listReducer = typeof customListReducer === 'function' ? customListReducer : defaultListReducer;
  return function (prevState, action) {
    return listReducer(prevState, action);
  };
}; // Selectors for a list

var makeListSelectors = function makeListSelectors(getData) {
  var getList = getData;

  var getCount = function getCount(state) {
    var data = getList(state);
    return data === null ? null : data.length;
  };

  return {
    getList: getList,
    getCount: getCount
  };
}; // RJ List

var rjPlainList = function rjPlainList(config) {
  if (config === void 0) {
    config = {};
  }

  var dataReducer = makeListDataReducer(config.customListReducer);
  return rj.rj(plugins_listInsert_index['default'](), plugins_listUpdate_index['default'](), plugins_listDelete_index['default'](), {
    selectors: function selectors(_ref2) {
      var getData = _ref2.getData;
      return makeListSelectors(getData);
    },
    reducer: function reducer(oldReducer) {
      return function (state, action) {
        if (action.type === rj.SUCCESS) {
          return _extends__default['default']({}, state, {
            pending: false,
            data: dataReducer(state.data, action)
          });
        } else {
          return oldReducer(state, action);
        }
      };
    },
    computed: {
      error: 'getError',
      loading: 'isLoading',
      list: 'getList'
    }
  });
};

exports.default = rjPlainList;
exports.makeListDataReducer = makeListDataReducer;
exports.makeListSelectors = makeListSelectors;
